/* Grid System ===============================================================*/

.container {
  max-width: 100%;
  width: 100%;
  margin: auto;
  padding-left: $gutter;
  padding-right: $gutter;
  &.xl {
    width: $xl;
  }
  &.l {
    width: $l;
  }
  &.m {
    width: $m;
  }
  &.s {
    width: $s;
  }
  @include s() {
    padding-left: $gutter/2;
    padding-right: $gutter/2;
  }
}

// Rows
.row {
  margin-left: -($gutter/2);
  margin-right: -($gutter/2);

  // Standard Grid
  &:after {
    content: '';
    display: table;
    clear: both;
  }

  // Reverse Grid
  &.reverse { @include reverse(); }
  &.xl-reverse { @include xl() { @include reverse(); } }
  &.l-reverse { @include l() { @include reverse(); } }
  &.m-reverse { @include m() { @include reverse(); } }
  &.s-reverse { @include s() { @include reverse(); } }

  // Table Grid
  &.table { @include table(); }
  &.xl-table { @include xl() { @include table(); } }
  &.l-table { @include l() { @include table(); } }
  &.m-table { @include m() { @include table(); } }
  &.s-table { @include s() { @include table(); } }

  // Collapsed Grid
  &.collapse { @include collapse(); }
  &.xl-collapse { @include xl() { @include collapse(); } }
  &.l-collapse { @include l() { @include collapse(); } }
  &.m-collapse { @include m() { @include collapse(); } }
  &.s-collapse { @include s() { @include collapse(); } }
}

// Column Grid
.column {
  float: left;
  min-height: 0.125rem;
  padding-left: $gutter/2;
  padding-right: $gutter/2;
  @for $i from 1 through $columns {
    &.l#{$i} { width: percentage($i/$columns); }
  }
  @include m() {
    @for $i from 1 through $columns {
      &.m#{$i} { width: percentage($i/$columns); }
    }
  }
  @include s() {
    @for $i from 1 through $columns {
      &.s#{$i} {
        width: percentage($i/$columns);
      }
    }
  }
  // Uniform Height Clearing
  @include l() {
    &:nth-child(6n+1).l2 { clear: both; }
    &:nth-child(4n+1).l3 { clear: both; }
    &:nth-child(3n+1).l4 { clear: both; }
    &:nth-child(2n+1).l6 { clear: both; }
  }
  @include m() {
    &:nth-child(6n+1).m2 { clear: both; }
    &:nth-child(4n+1).m3 { clear: both; }
    &:nth-child(3n+1).m4 { clear: both; }
    &:nth-child(2n+1).m6 { clear: both; }
  }
  @include s() {
    &:nth-child(6n+1).s2 { clear: both; }
    &:nth-child(4n+1).s3 { clear: both; }
    &:nth-child(3n+1).s4 { clear: both; }
    &:nth-child(2n+1).s6 { clear: both; }
  }
}

// Flex Grid
.flex {
  @include flex();
  @include box-orient(horizontal);
  @include flex-flow(row, no-wrap);

  &.row {
    @include flex-direction(row);
    &.reverse {
      @include flex-direction(row-reverse);
    }
  }
  &.wrap {
    @include flex-wrap(wrap);
  }

  .h-start { @include justify-content(start); }
  .h-end { @include justify-content(end); }
  .h-center { @include justify-content(center); }
  .h-space-between { @include justify-content(space-between ); }
  .h-space-around { @include justify-content(space-around); }
  .h-space-evenly { @include justify-content(space-evenly); }

  .v-start { @include align-content(start); }
  .v-end { @include align-content(end); }
  .v-center { @include align-content(center); }
  .v-space-between { @include align-content(space-between ); }
  .v-space-around { @include align-content(space-around); }
  .v-space-evenly { @include align-content(space-evenly); }
  .v-stretch { @include align-content(stretch); }

  .grow { @include flex-grow(1); }
}
